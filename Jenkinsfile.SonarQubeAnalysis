#!groovy
node {
    def buildImage = docker.image('nextcode/builderimg-java:openjdk8')
    stage('Pull build image') {
        buildImage.pull()
    }
    stage('SCM Checkout') {
        checkout scm
    }

    def gradleHome = "${WORKSPACE}/.gor_gradle_home"
    stage('Prepare build environment') {
        sh "mkdir -p ${gradleHome}"
    }

    def gradleOpts = "-g ${gradleHome} --console=plain"


    withCredentials([usernamePassword(credentialsId: 'ArtifactoryBuild', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD'),
                     string(credentialsId: 'GOR_SONARQUBE_API_KEY', variable: 'SONARQUBE_LOGIN'),]) {
        gradleOpts += " -Partifactory_user=${ARTIFACTORY_USER} -Partifactory_password=${ARTIFACTORY_PASSWORD}"
        gradleOpts += " -Dsonar.login=${SONARQUBE_LOGIN}"
        gradleOpts += " -Dsonar.exclusions=**/*.png,**/*.gif,**/*.GIF,**/*.ttf,**/*.otf,**/*.eot,**/Thumbs.db"
        gradleOpts += " -Dsonar.dependencyCheck.xmlReportPath=${WORKSPACE}/build/reports/dependency-check-report.xml"
        gradleOpts += " -Dsonar.dependencyCheck.htmlReportPath=${WORKSPACE}/build/reports/dependency-check-report.html"
    }

    buildImage.inside("--env TZ=UTC --dns 10.3.1.10 --dns 10.3.1.11 --dns-search nextcode.local") {

        try {
            stage('Analyze') {
                sh "./gradlew ${gradleOpts} clean :dependencyCheckAggregate test slowTest integrationTest jacocoTestReport :sonar"
            }
        } catch (err) {
            slackSend channel: 'ra-dev, gor-core', color: 'warning', message: "SonarQube Analysis failed! (<${env.BUILD_URL}|View Failed Job>)", tokenCredentialId: 'SonarQube_Slack_Token'
            throw err
        } finally {
            stage('Publish Test Reports') {
                step([$class: 'JUnitResultArchiver', testResults: '**/build/test-results/*/TEST-*.xml'])
            }
        }
    }
}