/*
 *  BEGIN_COPYRIGHT
 *
 *  Copyright (C) 2011-2013 deCODE genetics Inc.
 *  Copyright (C) 2013-2019 WuXi NextCode Inc.
 *  All Rights Reserved.
 *
 *  GORpipe is free software: you can redistribute it and/or modify
 *  it under the terms of the AFFERO GNU General Public License as published by
 *  the Free Software Foundation.
 *
 *  GORpipe is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
 *  INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
 *  NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
 *  the AFFERO GNU General Public License for the complete license terms.
 *
 *  You should have received a copy of the AFFERO GNU General Public License
 *  along with GORpipe.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
 *
 *  END_COPYRIGHT
 */

project(':tools') {
    dependencies {
        compile project(':base')
        compile project(':gortools')
        compile project(':model')
        compile 'org.jline:jline:3.13.3'
        compile 'info.picocli:picocli-shell-jline3:4.1.4'
        compile "com.fasterxml.jackson.core:jackson-databind:2.11.+"
        runtime project(':documentation')
        testCompile group: 'junit', name: 'junit', version: '4.+'
        testCompile project(':test')
    }

    jar {
        manifest.attributes 'Main-Class': "org.gorpipe.gorshell.GorShell"
    }

    // Distribution
    apply plugin: 'application'

    distributions {
        main {
            baseName "tools"
            contents {
                from(project(":documentation").jar.outputs.files.getFiles()) { into "lib" }
            }
        }
    }

    // Use the override keyword to override the default 'startScripts' task.
    def scripts = [
            'gorshell'   : ['className'     : 'org.gorpipe.gorshell.GorShell',
                            'defaultJvmOpts': ['-Djava.security.egd=file:/dev/./urandom',
                                               '-Dgor.querylimits.writequota.mb=0',
                                               '-Dgor.querylimits.timeout.seconds=0',
                                               '-Dlogback.configurationFile=__APP_HOME__/config/logback.xml']],
    ]

    scripts.each() { scriptName, params ->
        def t = params.containsKey('override') ? tasks.getByName(params.override) : tasks.create(name: scriptName + 'StartScript', type: CreateStartScripts)
        updateScriptTask("GOR", scriptName, params, t, project)
    }

    mainClassName = "dummy-not-used"
}

